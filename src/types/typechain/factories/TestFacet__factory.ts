/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestFacet, TestFacetInterface } from "../TestFacet";

const _abi = [
  {
    inputs: [],
    name: "getNextInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060b48061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063fbd3f7bd14602d575b600080fd5b60336045565b60405190815260200160405180910390f35b60055460009060549060016059565b905090565b60008219821115607957634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220d5f7fc219c07ddd6208dfa724de3912714c1323c91363ea08d4c027eff2e04d164736f6c63430008070033";

export class TestFacet__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestFacet> {
    return super.deploy(overrides || {}) as Promise<TestFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestFacet {
    return super.attach(address) as TestFacet;
  }
  connect(signer: Signer): TestFacet__factory {
    return super.connect(signer) as TestFacet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestFacetInterface {
    return new utils.Interface(_abi) as TestFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestFacet {
    return new Contract(address, _abi, signerOrProvider) as TestFacet;
  }
}
