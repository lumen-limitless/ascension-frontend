/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AscensionStakingStorage,
  AscensionStakingStorageInterface,
} from "../AscensionStakingStorage";

const _abi = [
  {
    inputs: [],
    name: "POSITION",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063355ac596146038575b600080fd5b605e7f99d1809423348f96b870b62ba64fabb4b02fb49a225e853c594bceb171c5b87f81565b60405190815260200160405180910390f3fea2646970667358221220874d1f1e62f2d86fd85ddda574bf7295ced79e30cf5f7280e82779b4ee1720d664736f6c63430008090033";

export class AscensionStakingStorage__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AscensionStakingStorage> {
    return super.deploy(overrides || {}) as Promise<AscensionStakingStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AscensionStakingStorage {
    return super.attach(address) as AscensionStakingStorage;
  }
  connect(signer: Signer): AscensionStakingStorage__factory {
    return super.connect(signer) as AscensionStakingStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AscensionStakingStorageInterface {
    return new utils.Interface(_abi) as AscensionStakingStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AscensionStakingStorage {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AscensionStakingStorage;
  }
}
