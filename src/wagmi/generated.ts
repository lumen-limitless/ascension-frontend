// Generated by @wagmi/cli@1.0.0 on 5/14/2023 at 9:44:07 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AscensionToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ascensionTokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Snapshot',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINTER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SNAPSHOT_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'snapshotId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'cap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'pos', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [
      {
        name: '',
        internalType: 'struct ERC20Votes.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'fromBlock', internalType: 'uint32', type: 'uint32' },
          { name: 'votes', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRoleMember',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleMemberCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'snapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'snapshotId', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupplyAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const ascensionTokenAddress =
  '0x9e724698051DA34994F281bD81C3E7372d1960AE' as const

export const ascensionTokenConfig = {
  address: ascensionTokenAddress,
  abi: ascensionTokenABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AscensionPolyStakingPool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ascensionPolyStakingPoolABI = [
  { stateMutability: 'payable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'AmountTooLarge' },
  { type: 'error', inputs: [], name: 'DurationTooLarge' },
  { type: 'error', inputs: [], name: 'IndexOutOfBounds' },
  { type: 'error', inputs: [], name: 'MaxDepositExceeded' },
  { type: 'error', inputs: [], name: 'MaxMintExceeded' },
  { type: 'error', inputs: [], name: 'MaxRedeemExceeded' },
  { type: 'error', inputs: [], name: 'MaxWithdrawExceeded' },
  { type: 'error', inputs: [], name: 'NotDistributor' },
  { type: 'error', inputs: [], name: 'OutputArrayTooSmall' },
  { type: 'error', inputs: [], name: 'PoolNotFinished' },
  { type: 'error', inputs: [], name: 'PopFromEmptyArray' },
  { type: 'error', inputs: [], name: 'RewardsTokenAlreadyAdded' },
  { type: 'error', inputs: [], name: 'RewardsTokenNotFound' },
  { type: 'error', inputs: [], name: 'RewardsTokensLimitReached' },
  { type: 'error', inputs: [], name: 'ZeroDistributorAddress' },
  { type: 'error', inputs: [], name: 'ZeroDuration' },
  { type: 'error', inputs: [], name: 'ZeroRewardsTokenAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'assets',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'allowed', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'DistributorChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardsToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PoolAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardsToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PoolRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'reward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'reward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardPaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'receiver',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'assets',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdraw',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'rewardsToken', internalType: 'address', type: 'address' },
    ],
    name: 'addRewardsToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'asset',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'pos', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [
      {
        name: '',
        internalType: 'struct ERC20Votes.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'fromBlock', internalType: 'uint32', type: 'uint32' },
          { name: 'votes', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rewardsToken', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'claim',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
    name: 'convertToAssets',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
    name: 'convertToShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'deposit',
    outputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'distributor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'maxDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'maxMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner_', internalType: 'address', type: 'address' }],
    name: 'maxRedeem',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner_', internalType: 'address', type: 'address' }],
    name: 'maxWithdraw',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shares', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'mint',
    outputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'rewardsToken', internalType: 'address', type: 'address' },
    ],
    name: 'poolInfo',
    outputs: [
      {
        name: '',
        internalType: 'struct PoolAccounting.Info',
        type: 'tuple',
        components: [
          { name: 'finished', internalType: 'uint40', type: 'uint40' },
          { name: 'duration', internalType: 'uint32', type: 'uint32' },
          { name: 'reward', internalType: 'uint184', type: 'uint184' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
    name: 'previewDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
    name: 'previewMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
    name: 'previewRedeem',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
    name: 'previewWithdraw',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shares', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'owner_', internalType: 'address', type: 'address' },
    ],
    name: 'redeem',
    outputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'rewardsToken', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'rewardsToken', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'reward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'rewardsTokenAt',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermitIfNecessary',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'allowed', internalType: 'bool', type: 'bool' },
    ],
    name: 'setDistributor',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'rewardsToken', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'period', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'startStaking',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalAssets',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalRewardsTokens',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'owner_', internalType: 'address', type: 'address' },
    ],
    name: 'withdraw',
    outputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const ascensionPolyStakingPoolAddress =
  '0xa77E481EFA8C668a21d866fa27d6867E03E3EdF5' as const

export const ascensionPolyStakingPoolConfig = {
  address: ascensionPolyStakingPoolAddress,
  abi: ascensionPolyStakingPoolABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AscensionRevenueDistributionToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ascensionRevenueDistributionTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'initialOwner', internalType: 'address', type: 'address' },
      { name: 'asset_', internalType: 'contract IERC20', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'ExpiredSignature' },
  { type: 'error', inputs: [], name: 'InsufficientPermit' },
  { type: 'error', inputs: [], name: 'InvalidBlockNumber' },
  { type: 'error', inputs: [], name: 'InvalidNonce' },
  { type: 'error', inputs: [], name: 'NotRewardDistributor' },
  { type: 'error', inputs: [], name: 'VoteOverflow' },
  { type: 'error', inputs: [], name: 'ZeroAssets' },
  { type: 'error', inputs: [], name: 'ZeroReceiver' },
  { type: 'error', inputs: [], name: 'ZeroShares' },
  { type: 'error', inputs: [], name: 'ZeroSupply' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'assets',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'freeAssets_',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'issuanceRate_',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceParamsUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'distributor_',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'vestingPeriodFinish_',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VestingScheduleUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'receiver',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'assets',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdraw',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'asset',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOfAssets',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'pos', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [
      {
        name: '',
        internalType: 'struct AscensionRevenueDistributionToken.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'fromBlock', internalType: 'uint32', type: 'uint32' },
          { name: 'votes', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
    name: 'convertToAssets',
    outputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
    name: 'convertToShares',
    outputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'deposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'depositWithPermit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'distributor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'freeAssets',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getAssetVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastAssetVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalAssets',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'issuanceRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastUpdated',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maxDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'maxMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'maxRedeem',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'maxWithdraw',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shares', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'mint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shares', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'maxAssets', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'mintWithPermit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pendingOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
    name: 'previewDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
    name: 'previewMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
    name: 'previewRedeem',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'assets', internalType: 'uint256', type: 'uint256' }],
    name: 'previewWithdraw',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shares', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'redeem',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'allowed', internalType: 'bool', type: 'bool' },
    ],
    name: 'setDistributor',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalAssets',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'vestingPeriod', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateVestingSchedule',
    outputs: [
      { name: 'issuanceRate_', internalType: 'uint256', type: 'uint256' },
      { name: 'freeAssets_', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vestingPeriodFinish',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'withdraw',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const ascensionRevenueDistributionTokenAddress =
  '0x42F5A9B27a60a7558D196747cb43e14cBe13B398' as const

export const ascensionRevenueDistributionTokenConfig = {
  address: ascensionRevenueDistributionTokenAddress,
  abi: ascensionRevenueDistributionTokenABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__.
 */
export function useAscensionTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAscensionTokenDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useAscensionTokenDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"MINTER_ROLE"`.
 */
export function useAscensionTokenMinterRole<
  TFunctionName extends 'MINTER_ROLE',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'MINTER_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"SNAPSHOT_ROLE"`.
 */
export function useAscensionTokenSnapshotRole<
  TFunctionName extends 'SNAPSHOT_ROLE',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'SNAPSHOT_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useAscensionTokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useAscensionTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"balanceOfAt"`.
 */
export function useAscensionTokenBalanceOfAt<
  TFunctionName extends 'balanceOfAt',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'balanceOfAt',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"cap"`.
 */
export function useAscensionTokenCap<
  TFunctionName extends 'cap',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'cap',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useAscensionTokenCheckpoints<
  TFunctionName extends 'checkpoints',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useAscensionTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"delegates"`.
 */
export function useAscensionTokenDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useAscensionTokenGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useAscensionTokenGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAscensionTokenGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useAscensionTokenGetRoleMember<
  TFunctionName extends 'getRoleMember',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'getRoleMember',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useAscensionTokenGetRoleMemberCount<
  TFunctionName extends 'getRoleMemberCount',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'getRoleMemberCount',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"getVotes"`.
 */
export function useAscensionTokenGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAscensionTokenHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"name"`.
 */
export function useAscensionTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"nonces"`.
 */
export function useAscensionTokenNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useAscensionTokenNumCheckpoints<
  TFunctionName extends 'numCheckpoints',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAscensionTokenSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useAscensionTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useAscensionTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"totalSupplyAt"`.
 */
export function useAscensionTokenTotalSupplyAt<
  TFunctionName extends 'totalSupplyAt',
  TSelectData = ReadContractResult<typeof ascensionTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ascensionTokenABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'totalSupplyAt',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__.
 */
export function useAscensionTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ascensionTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, TFunctionName, TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useAscensionTokenApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ascensionTokenABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'approve', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useAscensionTokenBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof ascensionTokenABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'burn', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useAscensionTokenBurnFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'burnFrom'
        >['request']['abi'],
        'burnFrom',
        TMode
      > & { functionName?: 'burnFrom' }
    : UseContractWriteConfig<typeof ascensionTokenABI, 'burnFrom', TMode> & {
        abi?: never
        functionName?: 'burnFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'burnFrom', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'burnFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useAscensionTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof ascensionTokenABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'decreaseAllowance', TMode>(
    {
      abi: ascensionTokenABI,
      address: ascensionTokenAddress,
      functionName: 'decreaseAllowance',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"delegate"`.
 */
export function useAscensionTokenDelegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<typeof ascensionTokenABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'delegate', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useAscensionTokenDelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        typeof ascensionTokenABI,
        'delegateBySig',
        TMode
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'delegateBySig', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAscensionTokenGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof ascensionTokenABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'grantRole', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useAscensionTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof ascensionTokenABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'increaseAllowance', TMode>(
    {
      abi: ascensionTokenABI,
      address: ascensionTokenAddress,
      functionName: 'increaseAllowance',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useAscensionTokenMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof ascensionTokenABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'mint', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"permit"`.
 */
export function useAscensionTokenPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof ascensionTokenABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'permit', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAscensionTokenRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        typeof ascensionTokenABI,
        'renounceRole',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'renounceRole', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAscensionTokenRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof ascensionTokenABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'revokeRole', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"snapshot"`.
 */
export function useAscensionTokenSnapshot<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'snapshot'
        >['request']['abi'],
        'snapshot',
        TMode
      > & { functionName?: 'snapshot' }
    : UseContractWriteConfig<typeof ascensionTokenABI, 'snapshot', TMode> & {
        abi?: never
        functionName?: 'snapshot'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'snapshot', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'snapshot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useAscensionTokenTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ascensionTokenABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'transfer', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useAscensionTokenTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionTokenABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ascensionTokenABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionTokenABI, 'transferFrom', TMode>({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__.
 */
export function usePrepareAscensionTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareAscensionTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareAscensionTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'burn'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareAscensionTokenBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'burnFrom'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'burnFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'burnFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareAscensionTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionTokenABI,
      'decreaseAllowance'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionTokenABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareAscensionTokenDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'delegate'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareAscensionTokenDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'delegateBySig'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAscensionTokenGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'grantRole'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareAscensionTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionTokenABI,
      'increaseAllowance'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionTokenABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareAscensionTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareAscensionTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'permit'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAscensionTokenRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'renounceRole'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAscensionTokenRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'revokeRole'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"snapshot"`.
 */
export function usePrepareAscensionTokenSnapshot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'snapshot'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'snapshot',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'snapshot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareAscensionTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'transfer'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareAscensionTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ascensionTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionTokenABI}__.
 */
export function useAscensionTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ascensionTokenABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof ascensionTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useAscensionTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionTokenABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ascensionTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionTokenABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useAscensionTokenDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionTokenABI, 'DelegateChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof ascensionTokenABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionTokenABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useAscensionTokenDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionTokenABI, 'DelegateVotesChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof ascensionTokenABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionTokenABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAscensionTokenRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionTokenABI, 'RoleAdminChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof ascensionTokenABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionTokenABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAscensionTokenRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionTokenABI, 'RoleGranted'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof ascensionTokenABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionTokenABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAscensionTokenRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionTokenABI, 'RoleRevoked'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof ascensionTokenABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionTokenABI}__ and `eventName` set to `"Snapshot"`.
 */
export function useAscensionTokenSnapshotEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionTokenABI, 'Snapshot'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    eventName: 'Snapshot',
    ...config,
  } as UseContractEventConfig<typeof ascensionTokenABI, 'Snapshot'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useAscensionTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionTokenABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionTokenABI,
    address: ascensionTokenAddress,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ascensionTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__.
 */
export function useAscensionPolyStakingPoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useAscensionPolyStakingPoolDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"allowance"`.
 */
export function useAscensionPolyStakingPoolAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"asset"`.
 */
export function useAscensionPolyStakingPoolAsset<
  TFunctionName extends 'asset',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'asset',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useAscensionPolyStakingPoolBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useAscensionPolyStakingPoolCheckpoints<
  TFunctionName extends 'checkpoints',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"convertToAssets"`.
 */
export function useAscensionPolyStakingPoolConvertToAssets<
  TFunctionName extends 'convertToAssets',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'convertToAssets',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"convertToShares"`.
 */
export function useAscensionPolyStakingPoolConvertToShares<
  TFunctionName extends 'convertToShares',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'convertToShares',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"decimals"`.
 */
export function useAscensionPolyStakingPoolDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"delegates"`.
 */
export function useAscensionPolyStakingPoolDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"distributor"`.
 */
export function useAscensionPolyStakingPoolDistributor<
  TFunctionName extends 'distributor',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'distributor',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useAscensionPolyStakingPoolGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useAscensionPolyStakingPoolGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"getVotes"`.
 */
export function useAscensionPolyStakingPoolGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"maxDeposit"`.
 */
export function useAscensionPolyStakingPoolMaxDeposit<
  TFunctionName extends 'maxDeposit',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'maxDeposit',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"maxMint"`.
 */
export function useAscensionPolyStakingPoolMaxMint<
  TFunctionName extends 'maxMint',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'maxMint',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"maxRedeem"`.
 */
export function useAscensionPolyStakingPoolMaxRedeem<
  TFunctionName extends 'maxRedeem',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'maxRedeem',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"maxWithdraw"`.
 */
export function useAscensionPolyStakingPoolMaxWithdraw<
  TFunctionName extends 'maxWithdraw',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'maxWithdraw',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"name"`.
 */
export function useAscensionPolyStakingPoolName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"nonces"`.
 */
export function useAscensionPolyStakingPoolNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useAscensionPolyStakingPoolNumCheckpoints<
  TFunctionName extends 'numCheckpoints',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"owner"`.
 */
export function useAscensionPolyStakingPoolOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useAscensionPolyStakingPoolPendingOwner<
  TFunctionName extends 'pendingOwner',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'pendingOwner',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"poolInfo"`.
 */
export function useAscensionPolyStakingPoolPoolInfo<
  TFunctionName extends 'poolInfo',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'poolInfo',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"previewDeposit"`.
 */
export function useAscensionPolyStakingPoolPreviewDeposit<
  TFunctionName extends 'previewDeposit',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'previewDeposit',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"previewMint"`.
 */
export function useAscensionPolyStakingPoolPreviewMint<
  TFunctionName extends 'previewMint',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'previewMint',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"previewRedeem"`.
 */
export function useAscensionPolyStakingPoolPreviewRedeem<
  TFunctionName extends 'previewRedeem',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'previewRedeem',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"previewWithdraw"`.
 */
export function useAscensionPolyStakingPoolPreviewWithdraw<
  TFunctionName extends 'previewWithdraw',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'previewWithdraw',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"reward"`.
 */
export function useAscensionPolyStakingPoolReward<
  TFunctionName extends 'reward',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'reward',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"rewardsTokenAt"`.
 */
export function useAscensionPolyStakingPoolRewardsTokenAt<
  TFunctionName extends 'rewardsTokenAt',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'rewardsTokenAt',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"symbol"`.
 */
export function useAscensionPolyStakingPoolSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"totalAssets"`.
 */
export function useAscensionPolyStakingPoolTotalAssets<
  TFunctionName extends 'totalAssets',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'totalAssets',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"totalRewardsTokens"`.
 */
export function useAscensionPolyStakingPoolTotalRewardsTokens<
  TFunctionName extends 'totalRewardsTokens',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'totalRewardsTokens',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useAscensionPolyStakingPoolTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__.
 */
export function useAscensionPolyStakingPoolWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName,
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useAscensionPolyStakingPoolAcceptOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'acceptOwnership'
        >['request']['abi'],
        'acceptOwnership',
        TMode
      > & { functionName?: 'acceptOwnership' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'acceptOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'acceptOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'acceptOwnership',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'acceptOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"addRewardsToken"`.
 */
export function useAscensionPolyStakingPoolAddRewardsToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'addRewardsToken'
        >['request']['abi'],
        'addRewardsToken',
        TMode
      > & { functionName?: 'addRewardsToken' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'addRewardsToken',
        TMode
      > & {
        abi?: never
        functionName?: 'addRewardsToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'addRewardsToken',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'addRewardsToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"approve"`.
 */
export function useAscensionPolyStakingPoolApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionPolyStakingPoolABI, 'approve', TMode>(
    {
      abi: ascensionPolyStakingPoolABI,
      address: ascensionPolyStakingPoolAddress,
      functionName: 'approve',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"claim"`.
 */
export function useAscensionPolyStakingPoolClaim<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'claim'
        >['request']['abi'],
        'claim',
        TMode
      > & { functionName?: 'claim' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'claim',
        TMode
      > & {
        abi?: never
        functionName?: 'claim'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionPolyStakingPoolABI, 'claim', TMode>({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useAscensionPolyStakingPoolDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'decreaseAllowance',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"delegate"`.
 */
export function useAscensionPolyStakingPoolDelegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'delegate',
        TMode
      > & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'delegate',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useAscensionPolyStakingPoolDelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'delegateBySig',
        TMode
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'delegateBySig',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"deposit"`.
 */
export function useAscensionPolyStakingPoolDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'deposit'
        >['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'deposit',
        TMode
      > & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionPolyStakingPoolABI, 'deposit', TMode>(
    {
      abi: ascensionPolyStakingPoolABI,
      address: ascensionPolyStakingPoolAddress,
      functionName: 'deposit',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useAscensionPolyStakingPoolIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'increaseAllowance',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"mint"`.
 */
export function useAscensionPolyStakingPoolMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'mint',
        TMode
      > & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionPolyStakingPoolABI, 'mint', TMode>({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"multicall"`.
 */
export function useAscensionPolyStakingPoolMulticall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'multicall'
        >['request']['abi'],
        'multicall',
        TMode
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'multicall',
        TMode
      > & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'multicall',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"permit"`.
 */
export function useAscensionPolyStakingPoolPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'permit',
        TMode
      > & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionPolyStakingPoolABI, 'permit', TMode>({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"redeem"`.
 */
export function useAscensionPolyStakingPoolRedeem<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'redeem'
        >['request']['abi'],
        'redeem',
        TMode
      > & { functionName?: 'redeem' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'redeem',
        TMode
      > & {
        abi?: never
        functionName?: 'redeem'
      } = {} as any,
) {
  return useContractWrite<typeof ascensionPolyStakingPoolABI, 'redeem', TMode>({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'redeem',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"removeRewardsToken"`.
 */
export function useAscensionPolyStakingPoolRemoveRewardsToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'removeRewardsToken'
        >['request']['abi'],
        'removeRewardsToken',
        TMode
      > & { functionName?: 'removeRewardsToken' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'removeRewardsToken',
        TMode
      > & {
        abi?: never
        functionName?: 'removeRewardsToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'removeRewardsToken',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'removeRewardsToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useAscensionPolyStakingPoolRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'renounceOwnership',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"selfPermit"`.
 */
export function useAscensionPolyStakingPoolSelfPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'selfPermit'
        >['request']['abi'],
        'selfPermit',
        TMode
      > & { functionName?: 'selfPermit' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'selfPermit',
        TMode
      > & {
        abi?: never
        functionName?: 'selfPermit'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'selfPermit',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'selfPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"selfPermitIfNecessary"`.
 */
export function useAscensionPolyStakingPoolSelfPermitIfNecessary<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'selfPermitIfNecessary'
        >['request']['abi'],
        'selfPermitIfNecessary',
        TMode
      > & { functionName?: 'selfPermitIfNecessary' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'selfPermitIfNecessary',
        TMode
      > & {
        abi?: never
        functionName?: 'selfPermitIfNecessary'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'selfPermitIfNecessary',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'selfPermitIfNecessary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"setDistributor"`.
 */
export function useAscensionPolyStakingPoolSetDistributor<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'setDistributor'
        >['request']['abi'],
        'setDistributor',
        TMode
      > & { functionName?: 'setDistributor' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'setDistributor',
        TMode
      > & {
        abi?: never
        functionName?: 'setDistributor'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'setDistributor',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'setDistributor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"startStaking"`.
 */
export function useAscensionPolyStakingPoolStartStaking<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'startStaking'
        >['request']['abi'],
        'startStaking',
        TMode
      > & { functionName?: 'startStaking' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'startStaking',
        TMode
      > & {
        abi?: never
        functionName?: 'startStaking'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'startStaking',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'startStaking',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"transfer"`.
 */
export function useAscensionPolyStakingPoolTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'transfer',
        TMode
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'transfer',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useAscensionPolyStakingPoolTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'transferFrom',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useAscensionPolyStakingPoolTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'transferOwnership',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"withdraw"`.
 */
export function useAscensionPolyStakingPoolWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionPolyStakingPoolABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<
        typeof ascensionPolyStakingPoolABI,
        'withdraw',
        TMode
      > & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionPolyStakingPoolABI,
    'withdraw',
    TMode
  >({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__.
 */
export function usePrepareAscensionPolyStakingPoolWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      TFunctionName
    >,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareAscensionPolyStakingPoolAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'acceptOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'acceptOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'acceptOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"addRewardsToken"`.
 */
export function usePrepareAscensionPolyStakingPoolAddRewardsToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'addRewardsToken'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'addRewardsToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'addRewardsToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareAscensionPolyStakingPoolApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'approve'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"claim"`.
 */
export function usePrepareAscensionPolyStakingPoolClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionPolyStakingPoolABI, 'claim'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'claim'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareAscensionPolyStakingPoolDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'decreaseAllowance'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareAscensionPolyStakingPoolDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'delegate'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'delegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareAscensionPolyStakingPoolDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'delegateBySig'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareAscensionPolyStakingPoolDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'deposit'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'deposit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareAscensionPolyStakingPoolIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'increaseAllowance'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareAscensionPolyStakingPoolMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionPolyStakingPoolABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'mint'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareAscensionPolyStakingPoolMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'multicall'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'multicall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareAscensionPolyStakingPoolPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionPolyStakingPoolABI, 'permit'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'permit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"redeem"`.
 */
export function usePrepareAscensionPolyStakingPoolRedeem(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ascensionPolyStakingPoolABI, 'redeem'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'redeem',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'redeem'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"removeRewardsToken"`.
 */
export function usePrepareAscensionPolyStakingPoolRemoveRewardsToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'removeRewardsToken'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'removeRewardsToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'removeRewardsToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareAscensionPolyStakingPoolRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'renounceOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"selfPermit"`.
 */
export function usePrepareAscensionPolyStakingPoolSelfPermit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'selfPermit'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'selfPermit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'selfPermit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"selfPermitIfNecessary"`.
 */
export function usePrepareAscensionPolyStakingPoolSelfPermitIfNecessary(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'selfPermitIfNecessary'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'selfPermitIfNecessary',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'selfPermitIfNecessary'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"setDistributor"`.
 */
export function usePrepareAscensionPolyStakingPoolSetDistributor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'setDistributor'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'setDistributor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'setDistributor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"startStaking"`.
 */
export function usePrepareAscensionPolyStakingPoolStartStaking(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'startStaking'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'startStaking',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'startStaking'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareAscensionPolyStakingPoolTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'transfer'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareAscensionPolyStakingPoolTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'transferFrom'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareAscensionPolyStakingPoolTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'transferOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareAscensionPolyStakingPoolWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionPolyStakingPoolABI,
      'withdraw'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionPolyStakingPoolABI,
    'withdraw'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__.
 */
export function useAscensionPolyStakingPoolEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ascensionPolyStakingPoolABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    ...config,
  } as UseContractEventConfig<typeof ascensionPolyStakingPoolABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"Approval"`.
 */
export function useAscensionPolyStakingPoolApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useAscensionPolyStakingPoolDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionPolyStakingPoolABI,
      'DelegateChanged'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionPolyStakingPoolABI,
    'DelegateChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useAscensionPolyStakingPoolDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionPolyStakingPoolABI,
      'DelegateVotesChanged'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionPolyStakingPoolABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"Deposit"`.
 */
export function useAscensionPolyStakingPoolDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'Deposit'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"DistributorChanged"`.
 */
export function useAscensionPolyStakingPoolDistributorChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionPolyStakingPoolABI,
      'DistributorChanged'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'DistributorChanged',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionPolyStakingPoolABI,
    'DistributorChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"OwnershipTransferStarted"`.
 */
export function useAscensionPolyStakingPoolOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionPolyStakingPoolABI,
      'OwnershipTransferStarted'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'OwnershipTransferStarted',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionPolyStakingPoolABI,
    'OwnershipTransferStarted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useAscensionPolyStakingPoolOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionPolyStakingPoolABI,
      'OwnershipTransferred'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionPolyStakingPoolABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"PoolAdded"`.
 */
export function useAscensionPolyStakingPoolPoolAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'PoolAdded'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'PoolAdded',
    ...config,
  } as UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'PoolAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"PoolRemoved"`.
 */
export function useAscensionPolyStakingPoolPoolRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'PoolRemoved'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'PoolRemoved',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionPolyStakingPoolABI,
    'PoolRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"RewardAdded"`.
 */
export function useAscensionPolyStakingPoolRewardAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'RewardAdded'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'RewardAdded',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionPolyStakingPoolABI,
    'RewardAdded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"RewardPaid"`.
 */
export function useAscensionPolyStakingPoolRewardPaidEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'RewardPaid'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'RewardPaid',
    ...config,
  } as UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'RewardPaid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"Transfer"`.
 */
export function useAscensionPolyStakingPoolTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionPolyStakingPoolABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useAscensionPolyStakingPoolWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'Withdraw'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionPolyStakingPoolABI,
    address: ascensionPolyStakingPoolAddress,
    eventName: 'Withdraw',
    ...config,
  } as UseContractEventConfig<typeof ascensionPolyStakingPoolABI, 'Withdraw'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__.
 */
export function useAscensionRevenueDistributionTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useAscensionRevenueDistributionTokenDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useAscensionRevenueDistributionTokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"asset"`.
 */
export function useAscensionRevenueDistributionTokenAsset<
  TFunctionName extends 'asset',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'asset',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useAscensionRevenueDistributionTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"balanceOfAssets"`.
 */
export function useAscensionRevenueDistributionTokenBalanceOfAssets<
  TFunctionName extends 'balanceOfAssets',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'balanceOfAssets',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useAscensionRevenueDistributionTokenCheckpoints<
  TFunctionName extends 'checkpoints',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"convertToAssets"`.
 */
export function useAscensionRevenueDistributionTokenConvertToAssets<
  TFunctionName extends 'convertToAssets',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'convertToAssets',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"convertToShares"`.
 */
export function useAscensionRevenueDistributionTokenConvertToShares<
  TFunctionName extends 'convertToShares',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'convertToShares',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useAscensionRevenueDistributionTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"delegates"`.
 */
export function useAscensionRevenueDistributionTokenDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"distributor"`.
 */
export function useAscensionRevenueDistributionTokenDistributor<
  TFunctionName extends 'distributor',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'distributor',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"freeAssets"`.
 */
export function useAscensionRevenueDistributionTokenFreeAssets<
  TFunctionName extends 'freeAssets',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'freeAssets',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"getAssetVotes"`.
 */
export function useAscensionRevenueDistributionTokenGetAssetVotes<
  TFunctionName extends 'getAssetVotes',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'getAssetVotes',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"getPastAssetVotes"`.
 */
export function useAscensionRevenueDistributionTokenGetPastAssetVotes<
  TFunctionName extends 'getPastAssetVotes',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'getPastAssetVotes',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"getPastTotalAssets"`.
 */
export function useAscensionRevenueDistributionTokenGetPastTotalAssets<
  TFunctionName extends 'getPastTotalAssets',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'getPastTotalAssets',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useAscensionRevenueDistributionTokenGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useAscensionRevenueDistributionTokenGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"getVotes"`.
 */
export function useAscensionRevenueDistributionTokenGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"issuanceRate"`.
 */
export function useAscensionRevenueDistributionTokenIssuanceRate<
  TFunctionName extends 'issuanceRate',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'issuanceRate',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"lastUpdated"`.
 */
export function useAscensionRevenueDistributionTokenLastUpdated<
  TFunctionName extends 'lastUpdated',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'lastUpdated',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"maxDeposit"`.
 */
export function useAscensionRevenueDistributionTokenMaxDeposit<
  TFunctionName extends 'maxDeposit',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'maxDeposit',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"maxMint"`.
 */
export function useAscensionRevenueDistributionTokenMaxMint<
  TFunctionName extends 'maxMint',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'maxMint',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"maxRedeem"`.
 */
export function useAscensionRevenueDistributionTokenMaxRedeem<
  TFunctionName extends 'maxRedeem',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'maxRedeem',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"maxWithdraw"`.
 */
export function useAscensionRevenueDistributionTokenMaxWithdraw<
  TFunctionName extends 'maxWithdraw',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'maxWithdraw',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"name"`.
 */
export function useAscensionRevenueDistributionTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"nonces"`.
 */
export function useAscensionRevenueDistributionTokenNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useAscensionRevenueDistributionTokenNumCheckpoints<
  TFunctionName extends 'numCheckpoints',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"owner"`.
 */
export function useAscensionRevenueDistributionTokenOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useAscensionRevenueDistributionTokenPendingOwner<
  TFunctionName extends 'pendingOwner',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'pendingOwner',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"previewDeposit"`.
 */
export function useAscensionRevenueDistributionTokenPreviewDeposit<
  TFunctionName extends 'previewDeposit',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'previewDeposit',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"previewMint"`.
 */
export function useAscensionRevenueDistributionTokenPreviewMint<
  TFunctionName extends 'previewMint',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'previewMint',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"previewRedeem"`.
 */
export function useAscensionRevenueDistributionTokenPreviewRedeem<
  TFunctionName extends 'previewRedeem',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'previewRedeem',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"previewWithdraw"`.
 */
export function useAscensionRevenueDistributionTokenPreviewWithdraw<
  TFunctionName extends 'previewWithdraw',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'previewWithdraw',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useAscensionRevenueDistributionTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"totalAssets"`.
 */
export function useAscensionRevenueDistributionTokenTotalAssets<
  TFunctionName extends 'totalAssets',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'totalAssets',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useAscensionRevenueDistributionTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"vestingPeriodFinish"`.
 */
export function useAscensionRevenueDistributionTokenVestingPeriodFinish<
  TFunctionName extends 'vestingPeriodFinish',
  TSelectData = ReadContractResult<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'vestingPeriodFinish',
    ...config,
  } as UseContractReadConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__.
 */
export function useAscensionRevenueDistributionTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName,
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useAscensionRevenueDistributionTokenAcceptOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'acceptOwnership'
        >['request']['abi'],
        'acceptOwnership',
        TMode
      > & { functionName?: 'acceptOwnership' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'acceptOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'acceptOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'acceptOwnership',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'acceptOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useAscensionRevenueDistributionTokenApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'approve',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useAscensionRevenueDistributionTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'decreaseAllowance',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"delegate"`.
 */
export function useAscensionRevenueDistributionTokenDelegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'delegate',
        TMode
      > & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'delegate',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useAscensionRevenueDistributionTokenDelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'delegateBySig',
        TMode
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'delegateBySig',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"deposit"`.
 */
export function useAscensionRevenueDistributionTokenDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'deposit'
        >['request']['abi'],
        'deposit',
        TMode
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'deposit',
        TMode
      > & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'deposit',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"depositWithPermit"`.
 */
export function useAscensionRevenueDistributionTokenDepositWithPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'depositWithPermit'
        >['request']['abi'],
        'depositWithPermit',
        TMode
      > & { functionName?: 'depositWithPermit' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'depositWithPermit',
        TMode
      > & {
        abi?: never
        functionName?: 'depositWithPermit'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'depositWithPermit',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'depositWithPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useAscensionRevenueDistributionTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'increaseAllowance',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useAscensionRevenueDistributionTokenMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'mint',
        TMode
      > & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'mint',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"mintWithPermit"`.
 */
export function useAscensionRevenueDistributionTokenMintWithPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'mintWithPermit'
        >['request']['abi'],
        'mintWithPermit',
        TMode
      > & { functionName?: 'mintWithPermit' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'mintWithPermit',
        TMode
      > & {
        abi?: never
        functionName?: 'mintWithPermit'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'mintWithPermit',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'mintWithPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"permit"`.
 */
export function useAscensionRevenueDistributionTokenPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'permit',
        TMode
      > & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'permit',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"redeem"`.
 */
export function useAscensionRevenueDistributionTokenRedeem<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'redeem'
        >['request']['abi'],
        'redeem',
        TMode
      > & { functionName?: 'redeem' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'redeem',
        TMode
      > & {
        abi?: never
        functionName?: 'redeem'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'redeem',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'redeem',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useAscensionRevenueDistributionTokenRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'renounceOwnership',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"setDistributor"`.
 */
export function useAscensionRevenueDistributionTokenSetDistributor<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'setDistributor'
        >['request']['abi'],
        'setDistributor',
        TMode
      > & { functionName?: 'setDistributor' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'setDistributor',
        TMode
      > & {
        abi?: never
        functionName?: 'setDistributor'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'setDistributor',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'setDistributor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useAscensionRevenueDistributionTokenTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'transfer',
        TMode
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'transfer',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useAscensionRevenueDistributionTokenTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'transferFrom',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useAscensionRevenueDistributionTokenTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'transferOwnership',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"updateVestingSchedule"`.
 */
export function useAscensionRevenueDistributionTokenUpdateVestingSchedule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'updateVestingSchedule'
        >['request']['abi'],
        'updateVestingSchedule',
        TMode
      > & { functionName?: 'updateVestingSchedule' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'updateVestingSchedule',
        TMode
      > & {
        abi?: never
        functionName?: 'updateVestingSchedule'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'updateVestingSchedule',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'updateVestingSchedule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"withdraw"`.
 */
export function useAscensionRevenueDistributionTokenWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ascensionRevenueDistributionTokenABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<
        typeof ascensionRevenueDistributionTokenABI,
        'withdraw',
        TMode
      > & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<
    typeof ascensionRevenueDistributionTokenABI,
    'withdraw',
    TMode
  >({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__.
 */
export function usePrepareAscensionRevenueDistributionTokenWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TFunctionName
    >,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareAscensionRevenueDistributionTokenAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'acceptOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'acceptOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'acceptOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareAscensionRevenueDistributionTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'approve'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareAscensionRevenueDistributionTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'decreaseAllowance'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareAscensionRevenueDistributionTokenDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'delegate'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'delegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareAscensionRevenueDistributionTokenDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'delegateBySig'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareAscensionRevenueDistributionTokenDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'deposit'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'deposit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"depositWithPermit"`.
 */
export function usePrepareAscensionRevenueDistributionTokenDepositWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'depositWithPermit'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'depositWithPermit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'depositWithPermit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareAscensionRevenueDistributionTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'increaseAllowance'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareAscensionRevenueDistributionTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'mint'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'mint'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"mintWithPermit"`.
 */
export function usePrepareAscensionRevenueDistributionTokenMintWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'mintWithPermit'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'mintWithPermit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'mintWithPermit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareAscensionRevenueDistributionTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'permit'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'permit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"redeem"`.
 */
export function usePrepareAscensionRevenueDistributionTokenRedeem(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'redeem'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'redeem',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'redeem'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareAscensionRevenueDistributionTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'renounceOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"setDistributor"`.
 */
export function usePrepareAscensionRevenueDistributionTokenSetDistributor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'setDistributor'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'setDistributor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'setDistributor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareAscensionRevenueDistributionTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'transfer'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareAscensionRevenueDistributionTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'transferFrom'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareAscensionRevenueDistributionTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'transferOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"updateVestingSchedule"`.
 */
export function usePrepareAscensionRevenueDistributionTokenUpdateVestingSchedule(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'updateVestingSchedule'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'updateVestingSchedule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'updateVestingSchedule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareAscensionRevenueDistributionTokenWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'withdraw'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'withdraw'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__.
 */
export function useAscensionRevenueDistributionTokenEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionRevenueDistributionTokenABI,
      TEventName
    >,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    ...config,
  } as UseContractEventConfig<
    typeof ascensionRevenueDistributionTokenABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useAscensionRevenueDistributionTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'Approval'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useAscensionRevenueDistributionTokenDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'DelegateChanged'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'DelegateChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useAscensionRevenueDistributionTokenDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'DelegateVotesChanged'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `eventName` set to `"Deposit"`.
 */
export function useAscensionRevenueDistributionTokenDepositEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'Deposit'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'Deposit'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `eventName` set to `"IssuanceParamsUpdated"`.
 */
export function useAscensionRevenueDistributionTokenIssuanceParamsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'IssuanceParamsUpdated'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    eventName: 'IssuanceParamsUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'IssuanceParamsUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `eventName` set to `"OwnershipTransferStarted"`.
 */
export function useAscensionRevenueDistributionTokenOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'OwnershipTransferStarted'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    eventName: 'OwnershipTransferStarted',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'OwnershipTransferStarted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useAscensionRevenueDistributionTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'OwnershipTransferred'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useAscensionRevenueDistributionTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'Transfer'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `eventName` set to `"VestingScheduleUpdated"`.
 */
export function useAscensionRevenueDistributionTokenVestingScheduleUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'VestingScheduleUpdated'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    eventName: 'VestingScheduleUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'VestingScheduleUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ascensionRevenueDistributionTokenABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useAscensionRevenueDistributionTokenWithdrawEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ascensionRevenueDistributionTokenABI,
      'Withdraw'
    >,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ascensionRevenueDistributionTokenABI,
    address: ascensionRevenueDistributionTokenAddress,
    eventName: 'Withdraw',
    ...config,
  } as UseContractEventConfig<
    typeof ascensionRevenueDistributionTokenABI,
    'Withdraw'
  >)
}
